{"version":3,"sources":["logic/util.js","logic/evaluate.js","logic/treeGenerator.js","logic/fitness.js","i18n.js","inputs.js","visuals.js","logic/Component.js","logic/functions.js","logic/Algorithm.js","App.js","reportWebVitals.js","reducers.js","index.js"],"names":["randomInt","range","Math","floor","random","randomIntInRange","min","max","trueWithProbabilty","probabilty","choose","choices","length","structuredClone","obj","JSON","parse","stringify","getRandom","sample","arr","size","indexes","Array","keys","map","sort","i","stringifyTleaf","specimen","value","Number","isInteger","toFixed","stringifySpecimen","type","name","children","join","chooseOne","array","tournamentSize","indexNormalised","tournament","specimenArray","tourmanentWinningProbability","specimenToCode","functions","inputVariables","codified","codify","childrenMapped","code","functionsUsed","toCode","e","reduce","x","y","Object","filter","codeAddition","mapSpecimenToStorable","function","fitness","specimenEvaluator","evaluator","variables","node","Tvalue","require","countSubNodes","subNodesCount","generateTree","mode","functionsMetaArray","leaves","maxLevel","currentLevel","generate","toLowerCase","chosen","arity","level","getNode","numberOfNode","parent","childNumber","child","mutate","newSpecimen","crossover","specimen1","specimen2","newSpecimen1","newSpecimen2","numberOfNodeToReplace1","numberOfNodeToReplace2","node1","childNumber1","node2","childNumber2","tmp","evaluate","points","point","module","exports","assignFitness","resources","en","translation","pl","i18n","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","useStyles","makeStyles","theme","root","flexGrow","margin","spacing","width","button","padding","Container","connect","state","problemType","populationSize","numberOfGenerations","maxTreeDepth","tournamentWinningProbability","crossoverProbability","pointsRaw","leavesRaw","algorithmState","currentGeneration","desiredGeneration","nodePenalty","dispatch","setValue","field","setFunction","event","target","checked","resetAlgorithmState","setDesiredGeneration","algorithm","lang","useParams","changeLanguage","classes","useState","numberOfgeneraionsToRun","setNumberOfgeneraionsToRun","capitalise","toUpperCase","slice","createNextGenerationButtonFunctionHelper","useCallback","a","createNextGeneration","startAndCreateFirstGeneration","createNextGenerationButtonFunction","runButtonFunction","resetButtonFunction","useEffect","setTimeout","document","title","t","className","noValidate","autoComplete","Grid","container","item","xs","Tooltip","arrow","placement","Button","variant","color","onClick","number","TextField","label","onChange","InputLabelProps","shrink","stateField","disabled","step","id","inputProps","multiline","rows","FormControl","component","FormLabel","RadioGroup","aria-label","FormControlLabel","control","Radio","key","Checkbox","table","generation","bestSpecimens","bestSpecimen","setCode","mapSpecimenToRow","row","TableRow","TableCell","scope","align","Typography","language","lineProps","style","wordBreak","whiteSpace","wrapLines","TableContainer","Paper","Table","TableHead","TableBody","setFunctions","setAlgorithmState","setCurrentGeneration","setBestSpecimens","setBestSpecimen","setProperty","setUserSelectedFunctions","getUserSelectedFunctions","console","log","setReduxSetters","protectedDivide","b","protectedLog","protectedSqrt","sqrt","abs","bitwiseXor","ifThenElse","c","addNameAndArity","R","v","k","add","onlyFor","subtract","multiply","divide","toString","exp","pow","sin","cos","neg","bitwiseOr","bitwiseAnd","or","and","xor","not","equalsNumeric","gtNumeric","ltNumeric","equals","gt","lt","Algorithm","this","running","reduxSetters","calculateUsableFuncitons","currentGenerationNumber","sortingFunction","isNaN","functionsArray","values","includes","userSelectedFunctions","setters","setBestSpecimensRedux","parseSinglePoint","real","integer","round","boolean","trim","split","line","vars","acc","fromInput","startsWith","endsWith","fromPoints","leavesFunctions","forEach","newGeneration","chosen1","chosen2","parsePoints","parseLeaves","createGenerationZero","generateNextGeneration","bestSpecimenThisGeneration","App","sm","md","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","canBeChangedAfterAlgorithmRun","store","createStore","action","composeWithDevTools","ReactDOM","render","StrictMode","basename","process","path","getElementById"],"mappings":"4wBAAO,SAASA,EAAUC,GACxB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAG7B,SAASI,EAAiBC,EAAKC,GACpC,OAAOP,EAAUO,EAAMD,GAAOA,EAGzB,SAASE,EAAmBC,GACjC,OAAOP,KAAKE,SAAWK,EAGlB,SAASC,EAAOC,GAErB,OAAOA,EADOX,EAAUW,EAAQC,SAI3B,IAAMC,EAAkB,SAACC,GAC9B,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,KAG5B,SAASI,EAAUZ,EAAKC,GAC7B,OAAOL,KAAKE,UAAYG,EAAMD,GAAOA,EAGhC,SAASa,EAAOC,EAAKC,GAC1B,IAAMC,EAAU,YAAIC,MAAMF,GAAMG,QAAQC,KAAI,kBAAMzB,EAAUoB,EAAIR,WAEhE,OADAU,EAAQI,OACDJ,EAAQG,KAAI,SAACE,GAAD,OAAOP,EAAIO,MAGzB,SAASC,EAAeC,GAC7B,OAAOA,EAASC,MAAMlB,QAElBmB,OAAOC,UAAUH,EAASC,QAEA,mBAAnBD,EAASC,MAHhBD,EAASC,MAKTD,EAASC,MAAMG,QAAQ,GAGtB,SAASC,EAAkBL,GAChC,MAAyB,MAAlBA,EAASM,KAAT,UACAP,EAAeC,IADf,UAEAA,EAASO,KAFT,YAEiBP,EAASQ,SAAWR,EAASQ,SAASZ,IAAIS,GAAmBI,KAAK,MAAQ,GAF3F,KAKF,SAASC,EAAUC,EAAOC,GAC/B,IAAMC,EAAkBxC,KAAKI,IAAL,MAAAJ,KAAI,YAAQ,YAAIqB,MAAMkB,GAAgBjB,QAAQC,KAAI,kBAAMvB,KAAKE,cAErF,OAAOoC,EAAMtC,KAAKC,MAAMuC,EAAkBF,EAAM5B,SAG3C,SAAS+B,EAAWC,EAAeC,GAA+B,IAAD,gBAC/CD,GAD+C,IACtE,2BAAsC,CAAC,IAA5Bf,EAA2B,QACpC,GAAIrB,EAAmBqC,GACrB,OAAOhB,GAH2D,8BAMtE,OAAOe,EAAcA,EAAchC,OAAS,GAGvC,SAASkC,EAAejB,EAAUkB,EAAWC,GAalD,IAAMC,EAZN,SAASC,EAAOrB,GAAW,IAAD,EAClBsB,EAAiBtB,EAASQ,SAAWR,EAASQ,SAASZ,IAAIyB,GAAU,KAC3E,MAAyB,MAAlBrB,EAASM,KACZ,CAAEiB,KAAK,GAAD,OAAKxB,EAAeC,IAAawB,cAAe,IACtD,CACED,MAAM,EAAAL,EAAUlB,EAASO,OAAMkB,OAAzB,oBAAmCH,EAAe1B,KAAI,SAAC8B,GAAD,OAAOA,EAAEH,UACrEC,cAAc,4BACRF,EAAiBA,EAAe1B,KAAI,SAAC8B,GAAD,OAAOA,EAAEF,iBAAiB,IAAIG,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAMC,OADxF,kBAEV7B,EAASO,KAAO,KAIVc,CAAOrB,GAQxB,MAAM,uBAAN,OAA8BmB,EAA9B,gBAAoDC,EAASG,KAA7D,aAAsEO,OAAOnC,KAAKyB,EAASI,eACxFO,QAAO,SAACL,GAAD,OAAOR,EAAUQ,GAAGM,gBAC3BpC,KAAI,SAAC8B,GAAD,OAAOR,EAAUQ,GAAGM,gBACxBvB,KAAK,OAGH,SAASwB,EAAsBP,EAAGR,EAAWC,GAClD,MAAO,CACLe,SAAU7B,EAAkBqB,GAC5BS,QAAST,EAAES,QAAQ/B,QAAQ,GAC3BmB,KAAMN,EAAeS,EAAGR,EAAWC,M,sGC7FhC,SAASiB,EAAkBlB,GAShC,OARA,SAASmB,EAAUC,EAAWtC,GAAW,IAAD,EAItC,MAAyB,MAAlBA,EAASM,MACZ,EAAAY,EAAUlB,EAASO,OAAM2B,SAAzB,oBAAqClC,EAASQ,SAASZ,KAAI,SAACgC,GAAD,OAAOS,EAAUC,EAAWV,QAJ3F,SAAgBW,GAAO,IAAD,EACpB,iBAAOD,EAAUC,EAAKtC,cAAtB,QAAgCsC,EAAKtC,MAInCuC,CAAOxC,M,oLCPgCyC,EAAQ,IAA/C5D,E,EAAAA,OAAQG,E,EAAAA,gBAAiBb,E,EAAAA,UAEjC,SAASuE,EAAc1C,GAWrB,OAVAA,EAAS2C,cACP,GACG3C,EAASQ,SACRR,EAASQ,SACNZ,KAAI,SAACgC,GAEJ,OADAc,EAAcd,GACPA,EAAEe,iBAEVhB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACxB,GACC7B,EAEF,SAAS4C,EAAaC,EAAMC,EAAoBC,EAAQC,GAA6B,IAAnBC,EAAkB,uDAAH,EACtF,SAASC,EAASD,GAChB,IAAMnE,EACJmE,IAAiBD,EACbD,EACuB,SAAvBF,EAAKM,eAA6C,IAAjBF,EACjCH,EADA,sBAEIA,GAFJ,YAE2BC,IAC3BK,EAASvE,EAAOC,GACtB,OAAQsE,EAAOC,MAMX,CACE/C,KAAM,IACNC,KAAM6C,EAAO7C,KACb+C,MAAOL,EACPzC,SAAU,YAAId,MAAM0D,EAAOC,QAAQzD,KAAI,kBAAMsD,EAASD,EAAe,OATvE,CACE3C,KAAM,IACNL,MAAOmD,IACPE,MAAOL,GASf,OAAOP,EAAcQ,EAASD,IAEhC,SAASM,EAAQvD,EAAUwD,GAAkD,IAApCC,EAAmC,uDAA1B,KAAMC,EAAoB,uDAAN,KAQpE,GAAqB,IAAjBF,IAAuBxD,EAASQ,SAClC,MAAO,CAAE+B,KAAMkB,EAAQC,eAEzB,IAAK,IAAMA,KAAe1D,EAASQ,SAAU,CAC3C,IAAMmD,EAAQ3D,EAASQ,SAASkD,GAChC,GAAIF,EAAeG,EAAMhB,cACvB,OAAOY,EAAQI,EAAOH,EAAcxD,EAAU0D,GAE9CF,GAAgBG,EAAMhB,cAG1B,MAAO,CAAEJ,KAAMkB,EAAQC,eAGlB,SAASE,EAAO5D,EAAU6C,EAAMC,EAAoBC,EAAQC,GACjE,IAAMa,EAAc7E,EAAgBgB,GADuC,EAI7CuD,EAAQvD,EAFR7B,EAAU0F,EAAYlB,cAAgB,IAE5DJ,EAJmE,EAInEA,KAAMmB,EAJ6D,EAI7DA,YAKd,OAFAnB,EAAK/B,SAASkD,GAAed,EAAaC,EAAMC,EAAoBC,EAAQC,EAAUT,EAAKe,MAAQ,GAE5FZ,EAAc1C,GAGhB,SAAS8D,EAAUC,EAAWC,GACnC,IAAMC,EAAejF,EAAgB+E,GAC/BG,EAAelF,EAAgBgF,GAC/BG,EAAyBhG,EAAU8F,EAAatB,cAAgB,GAChEyB,EAAyBjG,EAAU+F,EAAavB,cAAgB,GAJxB,EAMKY,EAAQU,EAAcE,GAA3DE,EANgC,EAMtC9B,KAA0B+B,EANY,EAMzBZ,YANyB,EAOKH,EAAQW,EAAcE,GAA3DG,EAPgC,EAOtChC,KAA0BiC,EAPY,EAOzBd,YAEfe,EAAMJ,EAAM7D,SAAS8D,GAI3B,OAHAD,EAAM7D,SAAS8D,GAAgBC,EAAM/D,SAASgE,GAC9CD,EAAM/D,SAASgE,GAAgBC,EAExB,CAAC/B,EAAcuB,GAAevB,EAAcwB,M,kBCtFrD,SAAS/B,EAAQuC,EAAUC,EAAQ3E,GACjC,OAAO2E,EACJ/E,KAAI,SAACgF,GAGJ,OAAOA,EAAM/C,EAAI6C,EAASE,EAAO5E,MAElCJ,KAAI,SAACgC,GAAD,OAAOA,EAAIA,KACfD,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAS1BgD,EAAOC,QAAU,CACf3C,UACA4C,cARF,SAAuBL,EAAUC,EAAQ3E,GAGvC,OADAA,EAASmC,QAAUjC,OAAOiC,EAAQuC,EAAUC,EAAQ3E,GAAUI,QAAQ,IAC/DJ,K,wPCRHgF,EAAY,CAChBC,GAAI,CACFC,Y,OAEFC,GAAI,CACFD,Y,QAIJE,IAAKC,KAAK,CACRL,YACAM,IAAK,KACLC,YAAa,KACbC,cAAc,EAEdC,cAAe,CACbC,aAAa,KAIFN,QAAf,E,QCTMO,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACV,uBAAwB,CACtBC,OAAQH,EAAMI,QAAQ,GACtBC,MAAO,QAETC,OAAQ,CACNC,QAASP,EAAMI,QAAQ,SA4Q7B,IA4CeI,EADGC,aA3CM,SAACC,GAiBvB,MAAO,CACLC,YAFED,EAdFC,YAiBAC,eAHEF,EAbFE,eAiBAC,oBAJEH,EAZFG,oBAiBAC,aALEJ,EAXFI,aAiBA/F,eANE2F,EAVF3F,eAiBAgG,6BAPEL,EATFK,6BAiBAC,qBAREN,EARFM,qBAiBAC,UATEP,EAPFO,UAiBAC,UAVER,EANFQ,UAiBA7F,UAXEqF,EALFrF,UAiBA8F,eAZET,EAJFS,eAiBAC,kBAbEV,EAHFU,kBAiBAC,kBAdEX,EAFFW,kBAiBAC,YAfEZ,EADFY,gBAoBuB,SAACC,GAC1B,MAAO,CACLC,SAAU,SAACC,EAAOrH,GAAR,OAAkBmH,EAAS,CAAE9G,KAAM,eAAgBL,QAAOqH,WACpEC,YAAa,SAACC,GAAD,OAAWJ,EAAS,CAAE9G,KAAM,eAAgBC,KAAMiH,EAAMC,OAAOlH,KAAMN,MAAOuH,EAAMC,OAAOC,WACtGC,oBAAqB,kBAAMP,EAAS,CAAE9G,KAAM,sBAAuBL,MAAO,gBAC1E2H,qBAAsB,SAAC3H,GAAD,OAAWmH,EAAS,CAAE9G,KAAM,wBAAyBL,cAG7DqG,EAhTlB,YAoBI,IAnBFuB,EAmBC,EAnBDA,UACArB,EAkBC,EAlBDA,YACAC,EAiBC,EAjBDA,eAEAE,GAeC,EAhBDD,oBAgBC,EAfDC,cACA/F,EAcC,EAdDA,eAEAiG,GAYC,EAbDD,6BAaC,EAZDC,sBACAC,EAWC,EAXDA,UACAC,EAUC,EAVDA,UACAM,EASC,EATDA,SACAnG,EAQC,EARDA,UACAqG,EAOC,EAPDA,YACAP,EAMC,EANDA,eACAW,EAKC,EALDA,oBACAV,EAIC,EAJDA,kBACAW,EAGC,EAHDA,qBACAV,EAEC,EAFDA,kBACAC,EACC,EADDA,YAEQW,EAASC,cAATD,KACR1C,EAAK4C,eAAeF,GACpB,IAAMG,EAAUtC,IAHf,EAI6DuC,mBAAS,GAJtE,mBAIMC,EAJN,KAI+BC,EAJ/B,KAKKC,EAAa,SAAC3G,GAAD,OAAOA,EAAE,GAAG4G,cAAgB5G,EAAE6G,MAAM,IAgBjDC,EAA2CC,sBAAW,sBAAC,sBAAAC,EAAA,sDACxC,eAAnB1B,EAAkCa,EAAUc,uBAAyBd,EAAUe,gCADpB,2CAE1D,CAACf,EAAWb,IAET6B,EAAkC,uCAAG,sBAAAH,EAAA,sDACzCd,EAAqB1H,OAAOgH,GAAqB,GACjDsB,IAFyC,2CAAH,qDAKlCM,EAAiB,uCAAG,sBAAAJ,EAAA,sDACxBd,EAAqB1H,OAAOgH,GAAqBhH,OAAOiI,IACxDK,IAFwB,2CAAH,qDAIjBO,EAAmB,uCAAG,sBAAAL,EAAA,sDAC1Bf,IACAC,EAAqB,GAFK,2CAAH,qDAczB,OAVAoB,qBAAU,WACRC,YAAW,WACL/I,OAAO+G,GAAqB/G,OAAOgH,IACrCsB,MAED,KACF,CAACA,EAA0CvB,EAAmBC,IACjE8B,qBAAU,WACRE,SAASC,MAAQ/D,EAAKgE,EAAE,WACvB,IAED,uBAAMC,UAAWpB,EAAQnC,KAAMwD,YAAU,EAACC,aAAa,MAAvD,UACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACxD,QAAS,EAAzB,UACE,cAACuD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAST,MAAO/D,EAAKgE,EAAE,iCAAkCS,OAAK,EAACC,UAAU,QAAzE,SACE,cAACC,EAAA,EAAD,CACEV,UAAWpB,EAAQ9B,OACnB6D,QAAQ,YACRC,MAAM,UACNC,QAzC+B,WACzCtC,EAAqB,GACrBC,EAAUe,iCAmCF,SAMGxD,EAAKgE,EAAE,+BAId,cAACI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAST,MAAO/D,EAAKgE,EAAE,gCAAiCS,OAAK,EAACC,UAAU,QAAxE,SACE,cAACC,EAAA,EAAD,CACEV,UAAWpB,EAAQ9B,OACnB6D,QAAQ,YACRC,MAAM,UACNC,QAASrB,EAJX,SAMGzD,EAAKgE,EAAE,8BAId,cAACI,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAST,MAAO/D,EAAKgE,EAAE,2BAA4BS,OAAK,EAACC,UAAU,QAAnE,SACE,cAACC,EAAA,EAAD,CAAQV,UAAWpB,EAAQ9B,OAAQ6D,QAAQ,YAAYC,MAAM,UAAUC,QAASpB,EAAhF,SACG1D,EAAKgE,EAAE,kBAAmB,CAAEe,OAAQhC,UAI3C,cAACqB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACS,EAAA,EAAD,CAIEC,MAAOjF,EAAKgE,EAAE,4BACd9I,KAAK,SACLL,MAAOkI,EACPmC,SAAU,SAAC5I,GAAD,OAAO0G,EAA2B1G,EAAE+F,OAAOxH,QACrDsK,gBAAiB,CACfC,QAAQ,GAEVR,QAAQ,eAIZ,cAACR,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAST,MAAO/D,EAAKgE,EAAE,mBAAoBS,OAAK,EAACC,UAAU,QAA3D,SACE,cAACC,EAAA,EAAD,CAAQV,UAAWpB,EAAQ9B,OAAQ6D,QAAQ,YAAYC,MAAM,UAAUC,QAASnB,EAAhF,SACG3D,EAAKgE,EAAE,oBAKhB,eAACI,EAAA,EAAD,CAAMC,WAAS,EAACxD,QAAS,EAAzB,UACG,CACC,CACE1F,KAAM,iBACNN,MAAOwG,EACPgE,WAAY,iBACZC,SAA6B,eAAnB1D,EACV2D,KAAM,IACNlM,IAAK,KAEP,CACE8B,KAAM,eACNN,MAAO0G,EACP8D,WAAY,eACZC,SAA6B,eAAnB1D,EACV2D,KAAM,EACNlM,IAAK,GAEP,CACE8B,KAAM,iBACNN,MAAOW,EACP6J,WAAY,iBACZC,UAAU,EACVC,KAAM,GACNlM,IAAK,GAEP,CACE8B,KAAM,uBACNN,MAAO4G,EACP4D,WAAY,uBACZC,UAAU,EACVC,KAAM,GACNlM,IAAK,EACLC,IAAK,GAEP,CACE6B,KAAM,cACNN,MAAOkH,EACPsD,WAAY,cACZC,UAAU,EACVC,KAAM,IACNlM,IAAK,EACLC,IAAK,IAEPkB,KAAI,gBAAGW,EAAH,EAAGA,KAAMN,EAAT,EAASA,MAAOwK,EAAhB,EAAgBA,WAAYC,EAA5B,EAA4BA,SAAUC,EAAtC,EAAsCA,KAAMlM,EAA5C,EAA4CA,IAAKC,EAAjD,EAAiDA,IAAjD,OACJ,cAAC8K,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAST,MAAO/D,EAAKgE,EAAE7I,EAAO,YAAasJ,OAAK,EAACC,UAAU,QAA3D,SACE,cAACM,EAAA,EAAD,CACEQ,GAAIrK,EAEJ8J,MAAOjF,EAAKgE,EAAE7I,GACdD,KAAK,SACLL,MAAOA,EACPqK,SAAU,SAAC5I,GAAD,OAAO2F,EAASoD,EAAYvK,OAAOwB,EAAE+F,OAAOxH,SACtDsK,gBAAiB,CACfC,QAAQ,GAEVR,QAAQ,WACRU,SAAUA,EACVG,WAAY,CAAEF,OAAMlM,MAAKC,QAVpB6B,UAeb,cAACiJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACS,EAAA,EAAD,CACEQ,GAAG,SACHP,MAAOjF,EAAKgE,EAAE,kBACd0B,WAAS,EACTC,KAAM,GACN9K,MAAO6G,EACPkD,QAAQ,WACRM,SAAU,SAAC5I,GAAD,OAAO2F,EAAS,YAAa3F,EAAE+F,OAAOxH,YAIpD,cAACuJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACS,EAAA,EAAD,CACEQ,GAAG,SACHP,MAAOjF,EAAKgE,EAAE,kBACd0B,WAAS,EACTC,KAAM,GACN9K,MAAuB,YAAhBuG,EAA4B,cAAgBO,EACnDiD,QAAQ,WACRM,SAAU,SAAC5I,GAAD,OAAO2F,EAAS,YAAa3F,EAAE+F,OAAOxH,QAChDyK,SAA0B,YAAhBlE,SAIhB,eAACgD,EAAA,EAAD,CAAMC,WAAS,EAACxD,QAAS,EAAzB,UACE,cAACuD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,eAACqB,EAAA,EAAD,CAAaC,UAAU,WAAvB,UACE,cAACC,EAAA,EAAD,CAAWD,UAAU,SAArB,SAA+B7F,EAAKgE,EAAE,iBACtC,cAAC+B,EAAA,EAAD,CACEC,aAAW,eACX7K,KAAK,eACLN,MAAOuG,EACP8D,SAAU,SAAC9C,GAAD,OAAWH,EAAS,cAAeG,EAAMC,OAAOxH,QAJ5D,SAMG,CAAC,OAAQ,UAAW,WAAWL,KAAI,SAAC8B,GAAD,OAClC,cAAC2J,EAAA,EAAD,CAEEpL,MAAOyB,EACP4J,QAAS,cAACC,EAAA,EAAD,CAAOb,SAA6B,eAAnB1D,IAC1BqD,MAAOhC,EAAWjD,EAAKgE,EAAE1H,KAHpBA,aASf,cAAC8H,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACqB,EAAA,EAAD,CAAaC,UAAU,WAAvB,SACGnJ,OAAOnC,KAAKuB,GAAWtB,KAAI,SAAC4L,GAAD,OAC1B,cAACH,EAAA,EAAD,CACEC,QACE,cAACG,EAAA,EAAD,CACE/D,QAASxG,EAAUsK,GACnBjL,KAAMiL,EAENlB,SAAU,SAAC9C,GACTD,EAAYC,IAEdkD,SAA6B,eAAnB1D,GAJLwE,GAOTnB,MAAOmB,oB,iFC1QjB7F,EAAYC,YAAW,CAC3B8F,MAAO,KAqET,IAkBerF,EADGC,aAjBM,SAACC,GAEvB,MAAO,CACLoF,WAF4FpF,EAAtFU,kBAGN2E,cAH4FrF,EAAnEqF,cAIzBC,aAJ4FtF,EAApDsF,aAKxC3E,kBAL4FX,EAAtCW,kBAMtDF,eAN4FT,EAAnBS,mBAUlD,SAACI,GAC1B,MAAO,KAKSd,EAjFlB,YAAkG,IAA/EqF,EAA8E,EAA9EA,WAAYC,EAAkE,EAAlEA,cAAeC,EAAmD,EAAnDA,aAAc3E,EAAqC,EAArCA,kBAAmBF,EAAkB,EAAlBA,eACrEc,EAASC,cAATD,KACR1C,EAAK4C,eAAeF,GACpB,IAAMG,EAAUtC,IAH+E,EAIvEuC,mBAAQ,OAAC2D,QAAD,IAACA,OAAD,EAACA,EAActK,MAJgD,mBAIxFA,EAJwF,KAIlFuK,EAJkF,KAKzFC,EAAmB,SAACC,EAAKlM,EAAGqJ,GAAT,OACvB,eAAC8C,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWjB,UAAU,KAAKkB,MAAM,MAAMC,MAAM,QAA5C,SACGjD,GAASrJ,EAAI,IAEhB,cAACoM,EAAA,EAAD,CAAWE,MAAM,QAAjB,SACE,cAACC,EAAA,EAAD,UAAaL,EAAI9J,aAEnB,cAACgK,EAAA,EAAD,CAAWE,MAAM,QAAjB,SAA0BJ,EAAI7J,UAC9B,cAAC+J,EAAA,EAAD,CAAWE,MAAM,QAAjB,SACE,cAACrC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,kBAAM4B,EAAQE,EAAIzK,OAAvE,SACG6D,EAAKgE,EAAE,kBAVCtJ,IAejB,OACE,qCACE,+BACGsF,EAAKgE,EAAE,cADV,IAEGuC,EAAa,EACVA,EAAazE,EAAb,WACMyE,EADN,cACsBA,GAAczE,EAAoBA,EAAoByE,GAD5E,WAEMA,GACN,MAEN,6BAAKA,EAAa,GAAwB,eAAnB3E,EAAkC5B,EAAKgE,EAAE,mBAAqB,KACpF7H,IAAI,OAAIsK,QAAJ,IAAIA,OAAJ,EAAIA,EAActK,MACrB,qCACE,uCACA,cAAC,IAAD,CACE+K,SAAS,aACTC,UAAW,CAAEC,MAAO,CAAEC,UAAW,YAAaC,WAAY,aAC1DC,WAAW,EAHb,SAKGpL,IAAI,OAAIsK,QAAJ,IAAIA,OAAJ,EAAIA,EAActK,WAI3B,6BAGF,cAACqL,EAAA,EAAD,CAAgB3B,UAAW4B,IAA3B,SACE,eAACC,EAAA,EAAD,CAAOzD,UAAWpB,EAAQyD,MAAON,aAAW,eAA5C,WACIS,EAAe,CAACA,GAAgB,IAAIjM,KAAI,SAACoM,EAAKlM,GAAN,OAAYiM,EAAiBC,EAAKlM,EAAGsF,EAAKgE,EAAE,kBACtF,cAAC2D,EAAA,EAAD,UACE,eAACd,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWE,MAAM,QAAjB,SAA0BhH,EAAKgE,EAAE,YACjC,cAAC8C,EAAA,EAAD,CAAWE,MAAM,QAAjB,SAA0BhH,EAAKgE,EAAE,cACjC,cAAC8C,EAAA,EAAD,CAAWE,MAAM,QAAjB,SAA0BhH,EAAKgE,EAAE,kBACjC,cAAC8C,EAAA,EAAD,CAAWE,MAAM,QAAjB,SAA0BhH,EAAKgE,EAAE,mBAGrC,cAAC4D,EAAA,EAAD,UAAYpB,EAAchM,KAAI,SAACoM,EAAKlM,GAAN,OAAYiM,EAAiBC,EAAKlM,mBClC1E,IAuCeuG,EADGC,aAtCM,SAACC,GAcvB,MAAO,CACLC,YAFED,EAXFC,YAcAC,eAHEF,EAVFE,eAcAC,oBAJEH,EATFG,oBAcAC,aALEJ,EARFI,aAcA/F,eANE2F,EAPF3F,eAcAgG,6BAPEL,EANFK,6BAcAC,qBAREN,EALFM,qBAcAC,UATEP,EAJFO,UAcAC,UAVER,EAHFQ,UAcA7F,UAXEqF,EAFFrF,UAcAiG,YAZEZ,EADFY,gBAiBuB,SAACC,GAC1B,MAAO,CACL6F,aAAc,SAAC/L,GAAD,OAAekG,EAAS,CAAE9G,KAAM,gBAAiBY,eAC/DgM,kBAAmB,SAACjN,GAAD,OAAWmH,EAAS,CAAE9G,KAAM,sBAAuBL,WACtEkN,qBAAsB,SAAClN,GAAD,OAAWmH,EAAS,CAAE9G,KAAM,yBAA0BL,WAC5EmN,iBAAkB,SAACnN,GAAD,OAAWmH,EAAS,CAAE9G,KAAM,qBAAsBL,WACpEoN,gBAAiB,SAACpN,GAAD,OAAWmH,EAAS,CAAE9G,KAAM,oBAAqBL,cAGpDqG,EAjFlB,YAkBI,IAjBFuB,EAiBC,EAjBDA,UACArB,EAgBC,EAhBDA,YACAC,EAeC,EAfDA,eACAC,EAcC,EAdDA,oBACAC,EAaC,EAbDA,aACA/F,EAYC,EAZDA,eACAgG,EAWC,EAXDA,6BACAC,EAUC,EAVDA,qBACAC,EASC,EATDA,UACAC,EAQC,EARDA,UACAkG,EAOC,EAPDA,aACA/L,EAMC,EANDA,UACAgM,EAKC,EALDA,kBACAC,EAIC,EAJDA,qBACAC,EAGC,EAHDA,iBACAC,EAEC,EAFDA,gBACAlG,EACC,EADDA,YAwBA,OAtBAU,EAAUyF,YAAY,iBAAkBpN,OAAOuG,IAC/CoB,EAAUyF,YAAY,sBAAuBpN,OAAOwG,IACpDmB,EAAUyF,YAAY,eAAgBpN,OAAOyG,IAC7CkB,EAAUyF,YAAY,iBAAkBpN,OAAOU,IAC/CiH,EAAUyF,YAAY,+BAAgCpN,OAAO0G,IAC7DiB,EAAUyF,YAAY,uBAAwBpN,OAAO2G,IACrDgB,EAAUyF,YAAY,YAAaxG,GACnCe,EAAUyF,YAAY,YAAavG,GACnCc,EAAUyF,YAAY,cAAenG,GACC,IAAlCrF,OAAOnC,KAAKuB,GAAWnC,OACzB8I,EAAU0F,yBAAyBrM,GAEnC+L,EAAapF,EAAU2F,4BAEzBC,QAAQC,IAAIlH,EAAaqB,EAAUrB,aACnCiH,QAAQC,IAAIlH,IAAgBqB,EAAUrB,aAClCA,IAAgBqB,EAAUrB,cAC5BqB,EAAUyF,YAAY,cAAe9G,GACrCyG,EAAapF,EAAU2F,6BAGzB3F,EAAU8F,gBAAgB,CAAET,oBAAmBC,uBAAsBC,mBAAkBC,oBAChF,gC,+CCzCHO,EAAkB,SAAClF,EAAGmF,GAAJ,OAAiB,IAANA,EAAUnF,EAAImF,EAAInF,GAE/CoF,EAAe,SAACpF,EAAGmF,GAAJ,OAAWnF,EAAI,GAAKmF,EAAI,GAAW,IAANnF,EAAUrK,KAAKqP,IAAIG,GAAKxP,KAAKqP,IAAIhF,GAAK,GAElFqF,EAAgB,SAACrF,GAAD,OAAOrK,KAAK2P,KAAK3P,KAAK4P,IAAIvF,KAE1CwF,EAAa,SAACxF,EAAEmF,GAAH,OAAUnF,IAAMmF,IAAQnF,GAAKmF,GAE1CM,EAAa,SAACzF,EAAEmF,EAAEO,GAAL,OAAW1F,EAAImF,EAAIO,GAEvBC,E,OAZSC,GAAgB,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,IAAmBhO,KAAMiO,EAAGnL,MAAOkL,EAAErM,SAASnD,WAYvEsP,CAAgB,CAC7BI,IAAK,CACHvM,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,GACxBpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,cAAqBmF,EAArB,MACRa,QAAS,CAAC,UAAW,SAEvBC,SAAU,CACRzM,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,GACxBpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,cAAqBmF,EAArB,MACRa,QAAS,CAAC,UAAW,SAEvBE,SAAU,CACR1M,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,GACxBpM,OAAQ,SAACiH,EAAGmF,GAAJ,gBAAanF,EAAb,cAAoBmF,IAC5Ba,QAAS,CAAC,UAAW,SAEvBG,OAAQ,CACN3M,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,GACxBpM,OAAQ,SAACiH,EAAGmF,GAAJ,gBAAanF,EAAb,cAAoBmF,IAC5Ba,QAAS,CAAC,UAAW,SAEvBd,gBAAiB,CACf1L,SAAU0L,EACVnM,OAAQ,SAACiH,EAAGmF,GAAJ,gCAA6BnF,EAA7B,aAAmCmF,EAAnC,MACR7L,aAAa,2BAAD,OAA6B4L,EAAgBkB,YACzDJ,QAAS,CAAC,UAAW,SAEvBjQ,IAAK,CACHyD,SAAU,SAACwG,EAAGmF,GAAJ,OAAUxP,KAAKI,IAAIiK,EAAGmF,IAChCpM,OAAQ,SAACiH,EAAGmF,GAAJ,yBAAsBnF,EAAtB,aAA4BmF,EAA5B,MACRa,QAAS,CAAC,UAAW,SAEvBhQ,IAAK,CACHwD,SAAU,SAACwG,EAAGmF,GAAJ,OAAUxP,KAAKK,IAAIgK,EAAGmF,IAChCpM,OAAQ,SAACiH,EAAGmF,GAAJ,yBAAsBnF,EAAtB,aAA4BmF,EAA5B,MACRa,QAAS,CAAC,UAAW,SAEvBK,IAAK,CACH7M,SAAU,SAACwG,GAAD,OAAOrK,KAAK0Q,IAAIrG,IAC1BjH,OAAQ,SAACiH,GAAD,yBAAmBA,EAAnB,MACRgG,QAAS,CAAC,UAAW,SAEvBM,IAAK,CACH9M,SAAU,SAACwG,EAAGmF,GAAJ,OAAUxP,KAAK2Q,IAAItG,EAAGmF,IAChCpM,OAAQ,SAACiH,EAAGmF,GAAJ,yBAAsBnF,EAAtB,aAA4BmF,EAA5B,MACRa,QAAS,CAAC,UAAW,SAEvBhB,IAAK,CACHxL,SAAU,SAACwG,EAAGmF,GAAJ,OAAUxP,KAAKqP,IAAIG,GAAKxP,KAAKqP,IAAIhF,IAC3CjH,OAAQ,SAACiH,EAAGmF,GAAJ,yBAAsBA,EAAtB,wBAAuCnF,EAAvC,MACRgG,QAAS,CAAC,UAAW,SAEvBZ,aAAc,CACZ5L,SAAU4L,EACVrM,OAAQ,SAACiH,EAAGmF,GAAJ,6BAA0BnF,EAA1B,aAAgCmF,EAAhC,MACR7L,aAAa,wBAAD,OAA0B8L,EAAagB,YACnDJ,QAAS,CAAC,UAAW,SAEvBO,IAAK,CACH/M,SAAU,SAACwG,GAAD,OAAOrK,KAAK4Q,IAAIvG,IAC1BjH,OAAQ,SAACiH,GAAD,yBAAmBA,EAAnB,MACRgG,QAAS,CAAC,UAAW,SAEvBQ,IAAK,CACHhN,SAAU,SAACwG,GAAD,OAAOrK,KAAK6Q,IAAIxG,IAC1BjH,OAAQ,SAACiH,GAAD,yBAAmBA,EAAnB,MACRgG,QAAS,CAAC,UAAW,SAEvBV,KAAM,CACJ9L,SAAU,SAACwG,GAAD,OAAOrK,KAAK2P,KAAKtF,IAC3BjH,OAAQ,SAACiH,GAAD,0BAAoBA,EAApB,MACRgG,QAAS,CAAC,UAAW,SAEvBX,cAAe,CACb7L,SAAU6L,EACVtM,OAAQ,SAACiH,GAAD,8BAAwBA,EAAxB,MACR1G,aAAa,yBAAD,OAA2B+L,EAAce,YACrDJ,QAAS,CAAC,UAAW,SAEvBS,IAAK,CACHjN,SAAU,SAACwG,GAAD,OAAQA,GAClBjH,OAAQ,SAACiH,GAAD,iBAAWA,IACnBgG,QAAS,CAAC,UAAW,SAEvBU,UAAW,CACTlN,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,GACxBpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,cAAqBmF,EAArB,MACRa,QAAS,CAAC,YAEZW,WAAY,CACVnN,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,GACxBpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,cAAqBmF,EAArB,MACRa,QAAS,CAAC,YAEZR,WAAY,CACVhM,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,GACxBpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,cAAqBmF,EAArB,MACRa,QAAS,CAAC,YAEZY,GAAI,CACFpN,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,GACxBpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,eAAsBmF,EAAtB,MACRa,QAAS,CAAC,YAEZa,IAAK,CACHrN,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,GAAKmF,GACzBpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,eAAsBmF,EAAtB,MACRa,QAAS,CAAC,YAEZc,IAAK,CACHtN,SAAUgM,EACVzM,OAAQ,SAACiH,EAAGmF,GAAJ,2BAAwBnF,EAAxB,aAA8BmF,EAA9B,MACR7L,aAAa,sBAAD,OAAwBkM,EAAWY,YAC/CJ,QAAS,CAAC,YAEZP,WAAY,CACVjM,SAAUiM,EACV1M,OAAQ,SAACiH,EAAGmF,EAAGO,GAAP,2BAA2B1F,EAA3B,aAAiCmF,EAAjC,aAAuCO,EAAvC,MACRpM,aAAa,sBAAD,OAAwBmM,EAAWW,YAC/CJ,QAAS,CAAC,YAEZe,IAAK,CACHvN,SAAU,SAACwG,GAAD,OAAQA,GAClBjH,OAAQ,SAACiH,GAAD,kBAAYA,EAAZ,MACRgG,QAAS,CAAC,YAEZgB,cAAe,CACbxN,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,IAAMmF,EAAI,EAAI,GAClCpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,gBAAuBmF,EAAvB,cACRa,QAAS,CAAC,UAAW,SAEvBiB,UAAW,CACTzN,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,EAAI,EAAI,GAChCpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,cAAqBmF,EAArB,cACRa,QAAS,CAAC,UAAW,SAEvBkB,UAAW,CACT1N,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,EAAI,EAAI,GAChCpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,cAAqBmF,EAArB,cACRa,QAAS,CAAC,UAAW,SAEvBmB,OAAQ,CACN3N,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,IAAMmF,GAC1BpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,gBAAuBmF,EAAvB,qBACRa,QAAS,CAAC,YAEZoB,GAAI,CACF5N,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,GACxBpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,cAAqBmF,EAArB,qBACRa,QAAS,CAAC,YAEZqB,GAAI,CACF7N,SAAU,SAACwG,EAAGmF,GAAJ,OAAUnF,EAAImF,GACxBpM,OAAQ,SAACiH,EAAGmF,GAAJ,iBAAcnF,EAAd,cAAqBmF,EAArB,qBACRa,QAAS,CAAC,c,UC3JNtM,GAAsBK,EAAQ,KAA9BL,kB,GACoCK,EAAQ,KAA5CG,G,GAAAA,aAAcgB,G,GAAAA,OAAQE,G,GAAAA,UACtBiB,GAAkBtC,EAAQ,KAA1BsC,cAEaiL,G,WACnB,aAAe,IAAD,2BACZC,KAAKzJ,YAAc,OACnByJ,KAAKC,SAAU,EACfD,KAAKpN,KAAO,SACZoN,KAAKE,aAAe,GACpBF,KAAK/O,UAAYA,EACjB+O,KAAK9O,eAAiB,GACtB8O,KAAKG,2BACLH,KAAKvL,SAAWtC,GAAkBlB,GAClC+O,KAAKI,wBAA0B,EAC/BJ,KAAK9I,YAAc,EACnBsG,QAAQC,IAAI,CAAExM,cACd+O,KAAKK,gBAAkB,SAAC5H,EAAGmF,GAAJ,OACrB0C,MAAM7H,EAAEvG,SACJ,EACAoO,MAAM1C,EAAE1L,UACP,EACDuG,EAAEvG,QAAUuG,EAAE/F,cAAgB,EAAKwE,YAAc0G,EAAE1L,QAAU0L,EAAElL,cAAgB,EAAKwE,YACpF,EACA0G,EAAE1L,QAAU0L,EAAElL,cAAgB,EAAKwE,YAAcuB,EAAEvG,QAAUuG,EAAE/F,cAAgB,EAAKwE,aACnF,EACDuB,EAAE/F,cAAgBkL,EAAElL,cACpB,EACAkL,EAAElL,cAAgB+F,EAAE/F,eACnB,EACD,G,uEAGoB,IAAD,OACzB8K,QAAQC,IAAIuC,KAAKzJ,aACjByJ,KAAKO,eAAiB1O,OAAO2O,OAAOvP,GAAWa,QAAO,qBAAG2M,QAAsBgC,SAAS,EAAKlK,gBAC7FyJ,KAAKU,sBAAwBrC,KAC3BxM,OAAOnC,KAAKsQ,KAAK/O,WACda,QAAO,SAACL,GAAD,OAAO,EAAKR,UAAUQ,GAAGgN,QAAQgC,SAAS,EAAKlK,gBACtD5G,KAAI,SAAC8B,GAAD,sBAAWA,GAAI,OAExB+L,QAAQC,IAAI,QAASuC,KAAKU,uBAC1BlD,QAAQC,IACNY,KACExM,OAAOnC,KAAKsQ,KAAK/O,WACda,QAAO,SAACL,GAAD,OAAO,EAAKR,UAAUQ,GAAGgN,QAAQgC,SAAS,EAAKlK,gBACtD5G,KAAI,SAAC8B,GAAD,sBAAWA,GAAI,U,iDAO1B,OADA+L,QAAQC,IAAIuC,KAAKU,uBACVV,KAAKU,wB,+CAGWzP,GAAY,IAAD,OAClC+O,KAAKU,sBAAwBrC,KAC3BxM,OAAOnC,KAAKsQ,KAAKU,uBAAuB/Q,KAAI,SAAC8B,GAAD,sBAAWA,IAAMR,EAAUQ,QAEzEuO,KAAKO,eAAiB1O,OAAO2O,OAAOR,KAAK/O,WAAWa,QAClD,SAACH,GAAD,QAASV,EAAUU,EAAErB,OAASqB,EAAE8M,QAAQgC,SAAS,EAAKlK,kB,sCAI1CoK,GACdX,KAAKE,aAAL,2BAAyBF,KAAKE,cAAiBS,K,kCAGrCrQ,EAAMN,GAChBgQ,KAAK1P,GAAQN,EACA,gBAATM,GACF0P,KAAKG,2BAEM,gBAAT7P,GAA0B0P,KAAKtE,aACjCsE,KAAKtE,WAAW9L,KAAKoQ,KAAKK,iBAC1BL,KAAKY,wBACLZ,KAAKpE,aAAe7M,0BAAgBiR,KAAKtE,WAAW,IACpDsE,KAAKE,aAAa9C,gBAAgBpL,gCAAsBgO,KAAKpE,aAAcoE,KAAK/O,UAAW+O,KAAK9O,oB,oCAKlG,IAAM2P,EAAmB,CACvBC,KAAM,SAACrP,GAAD,OAAOxB,OAAOwB,IACpBsP,QAAS,SAACtP,GAAD,OAAOrD,KAAK4S,MAAM/Q,OAAOwB,KAClCwP,QAAS,SAACxP,GAAD,MAAO,CAAC,OAAQ,KAAKgP,SAAShP,EAAEyP,OAAOhO,iBAChD8M,KAAKzJ,aACPyJ,KAAKtL,OAASsL,KAAKnJ,UAAUsK,MAAM,MAAMxR,KAAI,SAACyR,GAC5C,IAAMC,EAAOD,EAAKD,MAAM,KAAKxR,KAAI,SAAC8B,GAAD,OAAOoP,EAAiBpP,MACnDiI,EAAK2H,EAAK/I,MAAM,GAAI,GACpB1G,EAAIyP,EAAK/I,OAAO,GAAG,GACzB,OAAO,2BACFoB,EAAGhI,QAAO,SAAC4P,EAAK3P,GAAN,MAAa,CAAE3B,MAAM,2BAAMsR,EAAItR,OAAX,6BAAuBsR,EAAIzR,GAAM8B,IAAK9B,EAAGyR,EAAIzR,EAAI,KAAM,CAAEG,MAAO,GAAIH,EAAG,IACrGG,OAFL,IAGE4B,SAGJ4L,QAAQC,IAAI,CAAE/I,OAAQsL,KAAKtL,W,oCAGd,IAAD,OAEN6M,EACiB,YAArBvB,KAAKzJ,YACDyJ,KAAKlJ,UAAUqK,MAAM,MAAMxR,KAAI,SAACyR,GAC9B,IAJS3P,EAIG2P,GAJKI,WAAW,MAAQ/P,EAAEgQ,SAAS,KAI5B,CAAC,IAAD,EACEL,EAChB9I,MAAM,GAAI,GACV6I,MAAM,KACNxR,KAAI,SAAC8B,GAAD,OAAOxB,OAAOwB,MAJJ,mBACVjD,EADU,KACLC,EADK,KAKjB,MAA4B,SAArB,EAAK8H,YAAyB,kBAAMnH,oBAAUZ,EAAKC,IAAO,kBAAMF,2BAAiBC,EAAKC,IAE7F,OAAO,kBAAMwB,OAAOmR,IAXd,IAAC3P,KAcX,EAAC,GAAM,GAAO9B,KAAI,SAAC8B,GAAD,OAAO,kBAAMA,MACrCuO,KAAK9O,eAAiBW,OAAOnC,KAAKsQ,KAAKtL,OAAO,IAAI5C,QAAO,SAACL,GAAD,MAAa,MAANA,KAChE,IAAMiQ,EAAa1B,KAAK9O,eAAevB,KAAI,SAAC8B,GAC1C,OAAO,kBAAMA,MAGfuO,KAAK2B,gBAAL,sBAA2BJ,GAA3B,YAAyCG,M,6CAGnB,IAAD,OAEfhG,EAAa,YAAIjM,MAAMuQ,KAAKxJ,gBAAgB9G,QAAQC,KAAI,kBAC5DgD,GAAa,GAAI,EAAK4N,eAAgB,EAAKoB,gBAAiB,EAAKjL,iBAEnEgF,EAAWkG,SAAQ,SAACnJ,GAAD,OAAO3D,GAAc,EAAKL,SAAU,EAAKC,OAAQ+D,MACpEiD,EAAW9L,KAAKoQ,KAAKK,iBACrBL,KAAKtE,WAAaA,I,sLAuBlB,IAFMmG,E,YAAoBpS,MAAMuQ,KAAKxJ,gBAAgB9G,QACjDG,EAAI,EACDA,EAAIgS,EAAc/S,QACnBe,EAAIgS,EAAc/S,OAAS,GAAKJ,6BAAmBsR,KAAKpJ,uBACpDkL,EAAUrR,oBAAUuP,KAAKtE,WAAYsE,KAAKrP,gBAG1CoR,EAAUtR,oBAAUuP,KAAKtE,WAAYsE,KAAKrP,gBAJiC,EAKlEkD,GAAUiO,EAASC,GAL+C,mBAK1EtJ,EAL0E,KAKvEmF,EALuE,KAMjFiE,EAAchS,GAAK4I,EACnB5I,IACAgS,EAAchS,GAAK+N,EACnB/N,MAEMsD,EAAS1C,oBAAUuP,KAAKtE,WAAYsE,KAAKrP,gBAE/CkR,EAAchS,GAAK8D,GAAOR,EAAQ6M,KAAKpN,KAAMoN,KAAKO,eAAgBP,KAAK2B,gBAAiB3B,KAAKtJ,cAC7F7G,KAEEA,EAAI,MAAS,GACf2N,QAAQC,IAAI5N,GAKhBgS,EAAcD,SAAQ,SAACnJ,GAAD,OAAO3D,GAAc,EAAKL,SAAU,EAAKC,OAAQ+D,MACvEoJ,EAAcjS,KAAKoQ,KAAKK,iBACxBL,KAAK6B,cAAgBA,E,oJAGE,IAAD,OACtB7B,KAAKE,aAAa/C,iBAChB6C,KAAKtE,WAAWpD,MAAM,EAAG,IAAI3I,KAAI,SAAC8B,GAAD,OAAOO,gCAAsBP,EAAG,EAAKR,UAAW,EAAKC,sB,sDAKxF8O,KAAKE,aAAajD,kBAAkB,WACpC+C,KAAKgC,cACLhC,KAAKiC,cACLjC,KAAKI,wBAA0B,EAC/BJ,KAAKE,aAAahD,qBAAqB8C,KAAKI,yBAC5CJ,KAAKkC,uBACLlC,KAAKpE,aAAe7M,0BAAgBiR,KAAKtE,WAAW,IACpDsE,KAAKE,aAAa9C,gBAAgBpL,gCAAsBgO,KAAKpE,aAAcoE,KAAK/O,UAAW+O,KAAK9O,iBAChG8O,KAAKY,0B,oKAILpD,QAAQC,IAAIuC,KAAK9I,aACjB8I,KAAKgC,cACLhC,KAAKiC,cACLjC,KAAKI,0BACLJ,KAAKE,aAAahD,qBAAqB8C,KAAKI,yB,SACtCJ,KAAKmC,yB,OACXnC,KAAKtE,WAAasE,KAAK6B,cAEvB7B,KAAKY,wBAECwB,EAA6BpC,KAAKtE,WAAW,GAC+D,IAAxEsE,KAAKK,gBAAgBL,KAAKpE,aAAcwG,KAEhFpC,KAAKpE,aAAe7M,0BAAgBqT,GACpCpC,KAAKE,aAAa9C,gBAAgBpL,gCAAsBgO,KAAKpE,aAAcoE,KAAK/O,UAAW+O,KAAK9O,kB,6PAOlG8O,KAAKgC,cACLhC,KAAKiC,gBACDjC,KAAKI,yBAA2BJ,KAAKvJ,qB,0CAA4B,G,UAChC,IAAjCuJ,KAAKI,wB,gBACPJ,KAAKrH,gC,wCAECqH,KAAKtH,uB,kCAEN,G,8GC3OI,SAAS2J,KACtB,IAAMzK,EAAY,IAAImI,GACdlI,EAASC,cAATD,KAER,OADA1C,EAAK4C,eAAeF,GAElB,sBAAKuB,UAAU,MAAf,UACE,eAACG,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI4I,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACE,cAAC,EAAD,CAAQ5K,UAAWA,MAErB,cAAC2B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI4I,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAArC,SACE,cAAC,EAAD,SAGJ,cAAC,EAAD,CAAO5K,UAAWA,OCvBxB,IAYe6K,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCCRQ,GAAe,CACnB3M,YAAa,OACbC,eAAgB,IAChBS,kBAAmB,EACnBP,aAAc,EACd/F,eAAgB,GAChBiG,qBAAsB,GACtBC,UAfa,YAAIpH,MAAM,IAAIC,QAAQC,KAAI,SAAC8I,GACxC,IAAM9G,EAAI8G,EAAI,GACd,MAAO,CACL9G,EAAGA,EAAExB,QAAQ,GACbyB,GAAID,EAAIA,EAAIA,GAAGxB,QAAQ,OAWPR,KAAI,gBAAGgC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAN,gBAAiBD,EAAjB,aAAuBC,MAAKpB,KAAK,MACvDsG,UAAW,CAAC,IAAK,KAAM,YAAYtG,KAAK,MACxCS,UAAW,GACX0K,cAAe,GACfC,aAAc,KACd5E,kBAAmB,IACnBD,eAAgB,aAChBG,YAAa,GAGTiM,GAAgC,CACpC,iBACA,uBACA,YACA,YACA,e,kBCpBIC,GAAQC,wBDuBa,WAAyC,IAA/B/M,EAA8B,uDAAtB4M,GAAcI,EAAQ,uCACjE,OAAQA,EAAOjT,MACb,IAAK,eACH,MAAgC,YAAzBiG,EAAMS,gBAAiCoM,GAA8B1C,SAAS6C,EAAOjM,OAArF,2BAGEf,GAHF,kBAIAgN,EAAOjM,MAAQiM,EAAOtT,QAHzBsG,EAKN,IAAK,gBACH,OAAO,2BACFA,GADL,IAEErF,UAAWqS,EAAOrS,YAEtB,IAAK,eACH,OAAO,2BACFqF,GADL,IAEErF,UAAU,2BACLqF,EAAMrF,WADF,kBAENqS,EAAOhT,KAAOgT,EAAOtT,UAG5B,IAAK,sBACH,OAAO,2BACFsG,GADL,IAEES,eAAgBuM,EAAOtT,MACvBiH,kBAAoC,eAAjBqM,EAAOtT,MAAyB,EAAIsG,EAAMW,oBAEjE,IAAK,yBACH,OAAO,2BACFX,GADL,IAEEU,kBAAmBsM,EAAOtT,QAE9B,IAAK,qBACH,OAAO,2BACFsG,GADL,IAEEqF,cAAe2H,EAAOtT,QAE1B,IAAK,oBACH,OAAO,2BACFsG,GADL,IAEEsF,aAAc0H,EAAOtT,QAEzB,IAAK,wBACH,OAAO,2BACFsG,GADL,IAEEW,kBAAmBqM,EAAOtT,QAE9B,QACE,OAAOsG,KCxE0BiN,kCAEvCC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,IAAMM,WAAP,UACE,cAAC,KAAD,CAAQC,SAAUC,wBAAlB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,SAAStT,SAAU,cAAC,GAAD,MAC/B,cAAC,IAAD,CAAOsT,KAAK,IAAItT,SAAU,cAAC,GAAD,MAC1B,cAAC,IAAD,CAAOsT,KAAK,GAAGtT,SAAU,cAAC,GAAD,eAKjC0I,SAAS6K,eAAe,SAM1BrB,M","file":"static/js/main.e8027bfc.chunk.js","sourcesContent":["export function randomInt(range) {\n  return Math.floor(Math.random() * range)\n}\n\nexport function randomIntInRange(min, max) {\n  return randomInt(max - min) + min\n}\n\nexport function trueWithProbabilty(probabilty) {\n  return Math.random() < probabilty\n}\n\nexport function choose(choices) {\n  const index = randomInt(choices.length)\n  return choices[index]\n}\n\nexport const structuredClone = (obj) => {\n  return JSON.parse(JSON.stringify(obj))\n}\n\nexport function getRandom(min, max) {\n  return Math.random() * (max - min) + min\n}\n\nexport function sample(arr, size) {\n  const indexes = [...Array(size).keys()].map(() => randomInt(arr.length))\n  indexes.sort()\n  return indexes.map((i) => arr[i])\n}\n\nexport function stringifyTleaf(specimen) {\n  return specimen.value.length\n    ? specimen.value\n    : Number.isInteger(specimen.value)\n    ? specimen.value\n    : typeof specimen.value === 'boolean'\n    ? specimen.value\n    : specimen.value.toFixed(5)\n}\n\nexport function stringifySpecimen(specimen) {\n  return specimen.type === 'T'\n    ? `${stringifyTleaf(specimen)}`\n    : `${specimen.name}(${specimen.children ? specimen.children.map(stringifySpecimen).join(', ') : ''})`\n}\n\nexport function chooseOne(array, tournamentSize) {\n  const indexNormalised = Math.min(...[...Array(tournamentSize).keys()].map(() => Math.random()))\n  // console.log({indexNormalised})\n  return array[Math.floor(indexNormalised * array.length)]\n}\n\nexport function tournament(specimenArray, tourmanentWinningProbability) {\n  for (const specimen of specimenArray) {\n    if (trueWithProbabilty(tourmanentWinningProbability)) {\n      return specimen\n    }\n  }\n  return specimenArray[specimenArray.length - 1]\n}\n\nexport function specimenToCode(specimen, functions, inputVariables) {\n  function codify(specimen) {\n    const childrenMapped = specimen.children ? specimen.children.map(codify) : null\n    return specimen.type === 'T'\n      ? { code: `${stringifyTleaf(specimen)}`, functionsUsed: {} }\n      : {\n          code: functions[specimen.name].toCode(...childrenMapped.map((e) => e.code)),\n          functionsUsed: {\n            ...(childrenMapped ? childrenMapped.map((e) => e.functionsUsed) : []).reduce((x, y) => ({ ...x, ...y })),\n            [specimen.name]: 1,\n          },\n        }\n  }\n  const codified = codify(specimen)\n  // console.log(Object.keys(codified.functionsUsed))\n  // console.log(Object.keys(codified.functionsUsed).filter((e) => functions[e].codeAddition))\n  // console.log(\n  //   Object.keys(codified.functionsUsed)\n  //     .filter((e) => functions[e].codeAddition)\n  //     .map((e) => functions[e].codeAddition),\n  // )\n  return `const myFunction = (${inputVariables}) => ${codified.code}\\n${Object.keys(codified.functionsUsed)\n    .filter((e) => functions[e].codeAddition)\n    .map((e) => functions[e].codeAddition)\n    .join('\\n')}`\n}\n\nexport function mapSpecimenToStorable(e, functions, inputVariables) {\n  return {\n    function: stringifySpecimen(e),\n    fitness: e.fitness.toFixed(5),\n    code: specimenToCode(e, functions, inputVariables),\n  }\n}\n\n// module.exports = {\n//   getRandom,\n//   randomInt,\n//   trueWithProbabilty,\n//   choose,\n//   structuredClone,\n//   sample,\n//   stringifySpecimen,\n//   tournament,\n//   mapSpecimenToStorable,\n// }\n","export function specimenEvaluator(functions) {\n  function evaluator(variables, specimen) {\n    function Tvalue(node) {\n      return variables[node.value] ?? node.value\n    }\n    return specimen.type === 'F'\n      ? functions[specimen.name].function(...specimen.children.map((x) => evaluator(variables, x)))\n      : Tvalue(specimen)\n  }\n  return evaluator\n}\n","const { choose, structuredClone, randomInt } = require('./util')\n\nfunction countSubNodes(specimen) {\n  specimen.subNodesCount =\n    1 +\n    (!!specimen.children\n      ? specimen.children\n          .map((x) => {\n            countSubNodes(x)\n            return x.subNodesCount\n          })\n          .reduce((x, y) => x + y)\n      : 0)\n  return specimen\n}\nexport function generateTree(mode, functionsMetaArray, leaves, maxLevel, currentLevel = 1) {\n  function generate(currentLevel) {\n    const choices =\n      currentLevel === maxLevel\n        ? leaves\n        : mode.toLowerCase() === 'full' || currentLevel === 1\n        ? functionsMetaArray\n        : [...functionsMetaArray, ...leaves]\n    const chosen = choose(choices)\n    return !chosen.arity\n      ? {\n          type: 'T',\n          value: chosen(),\n          level: currentLevel,\n        }\n      : {\n          type: 'F',\n          name: chosen.name,\n          level: currentLevel,\n          children: [...Array(chosen.arity)].map(() => generate(currentLevel + 1)),\n        }\n  }\n  return countSubNodes(generate(currentLevel))\n}\nfunction getNode(specimen, numberOfNode, parent = null, childNumber = null) {\n  //              10\n  //         /         \\\n  //        5           9\n  //       / \\           \\\n  //      2   4           8\n  //    / \\    \\         / \\\n  //   0   1     3      6   7\n  if (numberOfNode === 0 && !specimen.children) {\n    return { node: parent, childNumber }\n  }\n  for (const childNumber in specimen.children) {\n    const child = specimen.children[childNumber]\n    if (numberOfNode < child.subNodesCount) {\n      return getNode(child, numberOfNode, specimen, childNumber)\n    } else {\n      numberOfNode -= child.subNodesCount\n    }\n  }\n  return { node: parent, childNumber }\n}\n\nexport function mutate(specimen, mode, functionsMetaArray, leaves, maxLevel) {\n  const newSpecimen = structuredClone(specimen)\n  const numberOfNodeToReplace = randomInt(newSpecimen.subNodesCount - 1)\n  //   console.log('numberOfNodeToReplace', numberOfNodeToReplace)\n  const { node, childNumber } = getNode(specimen, numberOfNodeToReplace)\n  //   console.log(stringifySpecimen(node))\n  //   console.log(childNumber)\n  node.children[childNumber] = generateTree(mode, functionsMetaArray, leaves, maxLevel, node.level + 1)\n  //   console.log(stringifySpecimen(node))\n  return countSubNodes(specimen)\n}\n\nexport function crossover(specimen1, specimen2) {\n  const newSpecimen1 = structuredClone(specimen1)\n  const newSpecimen2 = structuredClone(specimen2)\n  const numberOfNodeToReplace1 = randomInt(newSpecimen1.subNodesCount - 1)\n  const numberOfNodeToReplace2 = randomInt(newSpecimen2.subNodesCount - 1)\n  //   console.log('numberOfNodeToReplace', numberOfNodeToReplace1, numberOfNodeToReplace2)\n  const { node: node1, childNumber: childNumber1 } = getNode(newSpecimen1, numberOfNodeToReplace1)\n  const { node: node2, childNumber: childNumber2 } = getNode(newSpecimen2, numberOfNodeToReplace2)\n\n  const tmp = node1.children[childNumber1]\n  node1.children[childNumber1] = node2.children[childNumber2]\n  node2.children[childNumber2] = tmp\n\n  return [countSubNodes(newSpecimen1), countSubNodes(newSpecimen2)]\n}\n\n// module.exports = {\n//   generateTree,\n//   mutate,\n//   crossover,\n// }\n","function fitness(evaluate, points, specimen) {\n  return points\n    .map((point) => {\n      // console.log(point.y - evaluate(point, specimen))\n      // console.log(point.y, evaluate(point, specimen))\n      return point.y - evaluate(point, specimen)\n    })\n    .map((x) => x * x)\n    .reduce((x, y) => x + y)\n}\n\nfunction assignFitness(evaluate, points, specimen) {\n  // console.log(fitness(evaluate, points, specimen))\n  specimen.fitness = Number(fitness(evaluate, points, specimen).toFixed(5))\n  return specimen\n}\n\nmodule.exports = {\n  fitness,\n  assignFitness,\n}\n","import i18n from 'i18next'\n\nimport translationEN from './locales/en.json'\nimport translationPL from './locales/pl.json'\n\n// the translations\nconst resources = {\n  en: {\n    translation: translationEN,\n  },\n  pl: {\n    translation: translationPL,\n  },\n}\n\ni18n.init({\n  resources,\n  lng: 'en',\n  fallbackLng: 'en',\n  keySeparator: false, // we do not use keys in form messages.welcome\n\n  interpolation: {\n    escapeValue: false, // react already safes from xss\n  },\n})\n\nexport default i18n\n","import React, { useState, useEffect, useCallback } from 'react'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport { connect } from 'react-redux'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Grid from '@material-ui/core/Grid'\nimport Tooltip from '@material-ui/core/Tooltip'\n// import * as R from 'ramda'\nimport i18n from './i18n'\nimport { useParams } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n    button: {\n      padding: theme.spacing(3),\n      // textAlign: 'center',\n      // color: theme.palette.text.secondary,\n    },\n  },\n}))\n\nfunction Inputs({\n  algorithm,\n  problemType,\n  populationSize,\n  numberOfGenerations,\n  maxTreeDepth,\n  tournamentSize,\n  tournamentWinningProbability,\n  crossoverProbability,\n  pointsRaw,\n  leavesRaw,\n  setValue,\n  functions,\n  setFunction,\n  algorithmState,\n  resetAlgorithmState,\n  currentGeneration,\n  setDesiredGeneration,\n  desiredGeneration,\n  nodePenalty,\n}) {\n  const { lang } = useParams()\n  i18n.changeLanguage(lang)\n  const classes = useStyles()\n  const [numberOfgeneraionsToRun, setNumberOfgeneraionsToRun] = useState(5)\n  const capitalise = (e) => e[0].toUpperCase() + e.slice(1)\n\n  // const runButtonFunction = () => {\n  //   algorithm.startAndCreateFirstGeneration()\n\n  //   for (let i = 0; i < algorithm.numberOfGenerations - 1; i++) {\n  //     console.log('Generacja', i)\n  //     await algorithm.createNextGeneration()\n  //   }\n  // }\n\n  const createGenerationZeroButtonFunction = () => {\n    setDesiredGeneration(1)\n    algorithm.startAndCreateFirstGeneration()\n  }\n\n  const createNextGenerationButtonFunctionHelper = useCallback(async () => {\n    algorithmState !== 'BEFORE_RUN' ? algorithm.createNextGeneration() : algorithm.startAndCreateFirstGeneration()\n  }, [algorithm, algorithmState])\n\n  const createNextGenerationButtonFunction = async () => {\n    setDesiredGeneration(Number(desiredGeneration) + 1)\n    createNextGenerationButtonFunctionHelper()\n  }\n\n  const runButtonFunction = async () => {\n    setDesiredGeneration(Number(desiredGeneration) + Number(numberOfgeneraionsToRun))\n    createNextGenerationButtonFunctionHelper()\n  }\n  const resetButtonFunction = async () => {\n    resetAlgorithmState()\n    setDesiredGeneration(0)\n  }\n  useEffect(() => {\n    setTimeout(() => {\n      if (Number(currentGeneration) < Number(desiredGeneration)) {\n        createNextGenerationButtonFunctionHelper()\n      }\n    }, 0)\n  }, [createNextGenerationButtonFunctionHelper, currentGeneration, desiredGeneration])\n  useEffect(() => {\n    document.title = i18n.t('title')\n  }, [])\n  return (\n    <form className={classes.root} noValidate autoComplete='off'>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Tooltip title={i18n.t('createFirstGeneration_tooltip')} arrow placement='right'>\n            <Button\n              className={classes.button}\n              variant='contained'\n              color='primary'\n              onClick={createGenerationZeroButtonFunction}\n            >\n              {i18n.t('createFirstGeneration')}\n            </Button>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={12}>\n          <Tooltip title={i18n.t('createNextGeneration_tooltip')} arrow placement='right'>\n            <Button\n              className={classes.button}\n              variant='contained'\n              color='primary'\n              onClick={createNextGenerationButtonFunction}\n            >\n              {i18n.t('createNextGeneration')}\n            </Button>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={12}>\n          <Tooltip title={i18n.t('runNGenerations_tooltip')} arrow placement='right'>\n            <Button className={classes.button} variant='contained' color='primary' onClick={runButtonFunction}>\n              {i18n.t('runNGenerations', { number: numberOfgeneraionsToRun })}\n            </Button>\n          </Tooltip>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            // id={name}\n            // key={name}\n            // label={name.split('-').map(capitalise).join(' ')}\n            label={i18n.t('numberOfGenerationsToRun')}\n            type='number'\n            value={numberOfgeneraionsToRun}\n            onChange={(e) => setNumberOfgeneraionsToRun(e.target.value)}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant='outlined'\n            // disabled={algorithmState !== 'BEFORE_RUN'}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Tooltip title={i18n.t('restart_tooltip')} arrow placement='right'>\n            <Button className={classes.button} variant='contained' color='primary' onClick={resetButtonFunction}>\n              {i18n.t('restart')}\n            </Button>\n          </Tooltip>\n        </Grid>\n      </Grid>\n      <Grid container spacing={1}>\n        {[\n          {\n            name: 'populationSize',\n            value: populationSize,\n            stateField: 'populationSize',\n            disabled: algorithmState !== 'BEFORE_RUN',\n            step: 1000,\n            min: 100,\n          },\n          {\n            name: 'maxTreeDepth',\n            value: maxTreeDepth,\n            stateField: 'maxTreeDepth',\n            disabled: algorithmState !== 'BEFORE_RUN',\n            step: 1,\n            min: 2,\n          },\n          {\n            name: 'tournamentSize',\n            value: tournamentSize,\n            stateField: 'tournamentSize',\n            disabled: false,\n            step: 10,\n            min: 1,\n          },\n          {\n            name: 'crossoverProbability',\n            value: crossoverProbability,\n            stateField: 'crossoverProbability',\n            disabled: false,\n            step: 0.1,\n            min: 0,\n            max: 1,\n          },\n          {\n            name: 'nodePenalty',\n            value: nodePenalty,\n            stateField: 'nodePenalty',\n            disabled: false,\n            step: 0.05,\n            min: 0,\n            max: 1,\n          },\n        ].map(({ name, value, stateField, disabled, step, min, max }) => (\n          <Grid item xs={12}>\n            <Tooltip title={i18n.t(name + '_tooltip')} arrow placement='right'>\n              <TextField\n                id={name}\n                key={name}\n                label={i18n.t(name)}\n                type='number'\n                value={value}\n                onChange={(e) => setValue(stateField, Number(e.target.value))}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant='outlined'\n                disabled={disabled}\n                inputProps={{ step, min, max }}\n              />\n            </Tooltip>\n          </Grid>\n        ))}\n        <Grid item xs={12}>\n          <TextField\n            id='points'\n            label={i18n.t('pointsWithInfo')}\n            multiline\n            rows={10}\n            value={pointsRaw}\n            variant='outlined'\n            onChange={(e) => setValue('pointsRaw', e.target.value)}\n            // disabled={algorithmState !== 'BEFORE_RUN'}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            id='leaves'\n            label={i18n.t('possibleLeaves')}\n            multiline\n            rows={10}\n            value={problemType === 'boolean' ? 'true, false' : leavesRaw}\n            variant='outlined'\n            onChange={(e) => setValue('leavesRaw', e.target.value)}\n            disabled={problemType === 'boolean'}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <FormControl component='fieldset'>\n            <FormLabel component='legend'>{i18n.t('problemType')}</FormLabel>\n            <RadioGroup\n              aria-label='problem-type'\n              name='problem-type'\n              value={problemType}\n              onChange={(event) => setValue('problemType', event.target.value)}\n            >\n              {['real', 'integer', 'boolean'].map((e) => (\n                <FormControlLabel\n                  key={e}\n                  value={e}\n                  control={<Radio disabled={algorithmState !== 'BEFORE_RUN'} />}\n                  label={capitalise(i18n.t(e))}\n                />\n              ))}\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl component='fieldset'>\n            {Object.keys(functions).map((key) => (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={functions[key]}\n                    name={key}\n                    key={key}\n                    onChange={(event) => {\n                      setFunction(event)\n                    }}\n                    disabled={algorithmState !== 'BEFORE_RUN'}\n                  />\n                }\n                label={key}\n              />\n            ))}\n          </FormControl>\n        </Grid>\n      </Grid>\n    </form>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  const {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n    algorithmState,\n    currentGeneration,\n    desiredGeneration,\n    nodePenalty,\n  } = state\n  return {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n    algorithmState,\n    currentGeneration,\n    desiredGeneration,\n    nodePenalty,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setValue: (field, value) => dispatch({ type: 'INPUT_CHANGE', value, field }),\n    setFunction: (event) => dispatch({ type: 'SET_FUNCTION', name: event.target.name, value: event.target.checked }),\n    resetAlgorithmState: () => dispatch({ type: 'SET_ALGORITHM_STATE', value: 'BEFORE_RUN' }),\n    setDesiredGeneration: (value) => dispatch({ type: 'SET_DESIRED_GENERAION', value }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Inputs)\nexport default Container\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { connect } from 'react-redux'\n// import Highlight from 'react-highlight.js'\nimport Button from '@material-ui/core/Button'\nimport { Typography } from '@material-ui/core'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport i18n from './i18n'\nimport { useParams } from 'react-router-dom'\n\nconst useStyles = makeStyles({\n  table: {\n    // minWidth: 650,\n  },\n})\n\nfunction Visuals({ generation, bestSpecimens, bestSpecimen, desiredGeneration, algorithmState }) {\n  const { lang } = useParams()\n  i18n.changeLanguage(lang)\n  const classes = useStyles()\n  const [code, setCode] = useState(bestSpecimen?.code)\n  const mapSpecimenToRow = (row, i, title) => (\n    <TableRow key={i}>\n      <TableCell component='th' scope='row' align='right'>\n        {title || i + 1}\n      </TableCell>\n      <TableCell align='right'>\n        <Typography>{row.function}</Typography>\n      </TableCell>\n      <TableCell align='right'>{row.fitness}</TableCell>\n      <TableCell align='right'>\n        <Button variant='contained' color='primary' onClick={() => setCode(row.code)}>\n          {i18n.t('showCode')}\n        </Button>\n      </TableCell>\n    </TableRow>\n  )\n  return (\n    <>\n      <h1>\n        {i18n.t('generation')}:\n        {generation > 0\n          ? generation < desiredGeneration\n            ? ` ${generation} / ${generation <= desiredGeneration ? desiredGeneration : generation}`\n            : ` ${generation}`\n          : ''}\n      </h1>\n      <h2>{generation > 0 && algorithmState === 'BEFORE_RUN' ? i18n.t('willBeRestarted') : ''}</h2>\n      {code || bestSpecimen?.code ? (\n        <>\n          <h2>Code:</h2>\n          <SyntaxHighlighter\n            language='javascript'\n            lineProps={{ style: { wordBreak: 'break-all', whiteSpace: 'pre-wrap' } }}\n            wrapLines={true}\n          >\n            {code || bestSpecimen?.code}\n          </SyntaxHighlighter>\n        </>\n      ) : (\n        <></>\n      )}\n\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label='simple table'>\n          {(bestSpecimen ? [bestSpecimen] : []).map((row, i) => mapSpecimenToRow(row, i, i18n.t('globalBest')))}\n          <TableHead>\n            <TableRow>\n              <TableCell align='right'>{i18n.t('number')}</TableCell>\n              <TableCell align='right'>{i18n.t('function')}</TableCell>\n              <TableCell align='right'>{i18n.t('errorSquared')}</TableCell>\n              <TableCell align='right'>{i18n.t('showCode')}</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{bestSpecimens.map((row, i) => mapSpecimenToRow(row, i))}</TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  )\n}\nconst mapStateToProps = (state) => {\n  const { currentGeneration, bestSpecimens, bestSpecimen, desiredGeneration, algorithmState } = state\n  return {\n    generation: currentGeneration,\n    bestSpecimens,\n    bestSpecimen,\n    desiredGeneration,\n    algorithmState,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // setValue: (field, value) => dispatch({ type: 'INPUT_CHANGE', value, field }),\n    // setFunction: (event) => dispatch({ type: 'SET_FUNCTION', name: event.target.name, value: event.target.checked }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Visuals)\nexport default Container\n","import React from 'react'\nimport { connect } from 'react-redux'\n// import * as R from 'ramda'\n\nfunction App({\n  algorithm,\n  problemType,\n  populationSize,\n  numberOfGenerations,\n  maxTreeDepth,\n  tournamentSize,\n  tournamentWinningProbability,\n  crossoverProbability,\n  pointsRaw,\n  leavesRaw,\n  setFunctions,\n  functions,\n  setAlgorithmState,\n  setCurrentGeneration,\n  setBestSpecimens,\n  setBestSpecimen,\n  nodePenalty,\n}) {\n  algorithm.setProperty('populationSize', Number(populationSize))\n  algorithm.setProperty('numberOfGenerations', Number(numberOfGenerations))\n  algorithm.setProperty('maxTreeDepth', Number(maxTreeDepth))\n  algorithm.setProperty('tournamentSize', Number(tournamentSize))\n  algorithm.setProperty('tournamentWinningProbability', Number(tournamentWinningProbability))\n  algorithm.setProperty('crossoverProbability', Number(crossoverProbability))\n  algorithm.setProperty('pointsRaw', pointsRaw)\n  algorithm.setProperty('leavesRaw', leavesRaw)\n  algorithm.setProperty('nodePenalty', nodePenalty)\n  if (Object.keys(functions).length !== 0) {\n    algorithm.setUserSelectedFunctions(functions)\n  } else {\n    setFunctions(algorithm.getUserSelectedFunctions())\n  }\n  console.log(problemType, algorithm.problemType)\n  console.log(problemType !== algorithm.problemType)\n  if (problemType !== algorithm.problemType) {\n    algorithm.setProperty('problemType', problemType)\n    setFunctions(algorithm.getUserSelectedFunctions())\n  }\n\n  algorithm.setReduxSetters({ setAlgorithmState, setCurrentGeneration, setBestSpecimens, setBestSpecimen })\n  return <></>\n}\nconst mapStateToProps = (state) => {\n  const {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n    nodePenalty,\n  } = state\n  return {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n    nodePenalty,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setFunctions: (functions) => dispatch({ type: 'SET_FUNCTIONS', functions }),\n    setAlgorithmState: (value) => dispatch({ type: 'SET_ALGORITHM_STATE', value }),\n    setCurrentGeneration: (value) => dispatch({ type: 'SET_CURRENT_GENERATION', value }),\n    setBestSpecimens: (value) => dispatch({ type: 'SET_BEST_SPECIMENS', value }),\n    setBestSpecimen: (value) => dispatch({ type: 'SET_BEST_SPECIMEN', value }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App)\nexport default Container\n","import * as R from 'ramda'\n\nconst addNameAndArity = R.mapObjIndexed((v, k) => ({ ...v, name: k, arity: v.function.length }))\n\nconst protectedDivide = (a, b) => (b !== 0 ? a / b : a)\n\nconst protectedLog = (a, b) => (a > 0 && b > 0 && a !== 1 ? Math.log(b) / Math.log(a) : 0)\n\nconst protectedSqrt = (a) => Math.sqrt(Math.abs(a))\n\nconst bitwiseXor = (a,b) => (a && !b) || (!a && b)\n\nconst ifThenElse = (a,b,c) => a ? b : c\n\nexport default addNameAndArity({\n  add: {\n    function: (a, b) => a + b,\n    toCode: (a, b) => `(${a} + ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  subtract: {\n    function: (a, b) => a - b,\n    toCode: (a, b) => `(${a} - ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  multiply: {\n    function: (a, b) => a * b,\n    toCode: (a, b) => `${a} * ${b}`,\n    onlyFor: ['integer', 'real'],\n  },\n  divide: {\n    function: (a, b) => a / b,\n    toCode: (a, b) => `${a} / ${b}`,\n    onlyFor: ['integer', 'real'],\n  },\n  protectedDivide: {\n    function: protectedDivide,\n    toCode: (a, b) => `protectedDivide(${a}, ${b})`,\n    codeAddition: `const protectedDivide = ${protectedDivide.toString()}`,\n    onlyFor: ['integer', 'real'],\n  },\n  min: {\n    function: (a, b) => Math.min(a, b),\n    toCode: (a, b) => `Math.min(${a}, ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  max: {\n    function: (a, b) => Math.max(a, b),\n    toCode: (a, b) => `Math.max(${a}, ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  exp: {\n    function: (a) => Math.exp(a),\n    toCode: (a) => `Math.exp(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  pow: {\n    function: (a, b) => Math.pow(a, b),\n    toCode: (a, b) => `Math.pow(${a}, ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  log: {\n    function: (a, b) => Math.log(b) / Math.log(a),\n    toCode: (a, b) => `Math.log(${b}) / Math.log(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  protectedLog: {\n    function: protectedLog,\n    toCode: (a, b) => `protectedLog(${a}, ${b})`,\n    codeAddition: `const protectedLog = ${protectedLog.toString()}`,\n    onlyFor: ['integer', 'real'],\n  },\n  sin: {\n    function: (a) => Math.sin(a),\n    toCode: (a) => `Math.sin(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  cos: {\n    function: (a) => Math.cos(a),\n    toCode: (a) => `Math.cos(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  sqrt: {\n    function: (a) => Math.sqrt(a),\n    toCode: (a) => `Math.sqrt(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  protectedSqrt: {\n    function: protectedSqrt,\n    toCode: (a) => `protectedSqrt(${a})`,\n    codeAddition: `const protectedSqrt = ${protectedSqrt.toString()}`,\n    onlyFor: ['integer', 'real'],\n  },\n  neg: {\n    function: (a) => -a,\n    toCode: (a) => `-${a}`,\n    onlyFor: ['integer', 'real'],\n  },\n  bitwiseOr: {\n    function: (a, b) => a | b,\n    toCode: (a, b) => `(${a} | ${b})`,\n    onlyFor: ['integer'],\n  },\n  bitwiseAnd: {\n    function: (a, b) => a & b,\n    toCode: (a, b) => `(${a} & ${b})`,\n    onlyFor: ['integer'],\n  },\n  bitwiseXor: {\n    function: (a, b) => a ^ b,\n    toCode: (a, b) => `(${a} ^ ${b})`,\n    onlyFor: ['integer'],\n  },\n  or: {\n    function: (a, b) => a | b,\n    toCode: (a, b) => `(${a} || ${b})`,\n    onlyFor: ['boolean'],\n  },\n  and: {\n    function: (a, b) => a && b,\n    toCode: (a, b) => `(${a} && ${b})`,\n    onlyFor: ['boolean'],\n  },\n  xor: {\n    function: bitwiseXor,\n    toCode: (a, b) => `bitwiseXor(${a}, ${b})`,\n    codeAddition: `const bitwiseXor = ${bitwiseXor.toString()}`,\n    onlyFor: ['boolean'],\n  },\n  ifThenElse: {\n    function: ifThenElse,\n    toCode: (a, b, c) => `ifThenElse(${a}, ${b}, ${c})`,\n    codeAddition: `const ifThenElse = ${ifThenElse.toString()}`,\n    onlyFor: ['boolean'],\n  },\n  not: {\n    function: (a) => !a,\n    toCode: (a) => `!(${a})`,\n    onlyFor: ['boolean'],\n  },\n  equalsNumeric: {\n    function: (a, b) => a === b ? 1 : 0,\n    toCode: (a, b) => `(${a} === ${b} ? 1 : 0)`,\n    onlyFor: ['integer', 'real'],\n  },\n  gtNumeric: {\n    function: (a, b) => a > b ? 1 : 0,\n    toCode: (a, b) => `(${a} > ${b} ? 1 : 0)`,\n    onlyFor: ['integer', 'real'],\n  },\n  ltNumeric: {\n    function: (a, b) => a > b ? 1 : 0,\n    toCode: (a, b) => `(${a} > ${b} ? 1 : 0)`,\n    onlyFor: ['integer', 'real'],\n  },\n  equals: {\n    function: (a, b) => a === b ? true : false,\n    toCode: (a, b) => `(${a} === ${b} ? true : false)`,\n    onlyFor: ['boolean'],\n  },\n  gt: {\n    function: (a, b) => a > b ? true : false,\n    toCode: (a, b) => `(${a} > ${b} ? true : false)`,\n    onlyFor: ['boolean'],\n  },\n  lt: {\n    function: (a, b) => a > b ? true : false,\n    toCode: (a, b) => `(${a} > ${b} ? true : false)`,\n    onlyFor: ['boolean'],\n  },\n})\n","import {\n  getRandom,\n  mapSpecimenToStorable,\n  // stringifySpecimen,\n  trueWithProbabilty,\n  // sample,\n  // tournament,\n  structuredClone,\n  chooseOne,\n  randomIntInRange,\n} from './util'\nimport functions from './functions'\nimport * as R from 'ramda'\nconst { specimenEvaluator } = require('./evaluate')\nconst { generateTree, mutate, crossover } = require('./treeGenerator')\nconst { assignFitness } = require('./fitness')\n\nexport default class Algorithm {\n  constructor() {\n    this.problemType = 'real'\n    this.running = false\n    this.mode = 'Fullnt'\n    this.reduxSetters = {}\n    this.functions = functions\n    this.inputVariables = []\n    this.calculateUsableFuncitons()\n    this.evaluate = specimenEvaluator(functions)\n    this.currentGenerationNumber = 0\n    this.nodePenalty = 0\n    console.log({ functions })\n    this.sortingFunction = (a, b) =>\n      isNaN(a.fitness)\n        ? 1\n        : isNaN(b.fitness)\n        ? -1\n        : a.fitness + a.subNodesCount * this.nodePenalty > b.fitness + b.subNodesCount * this.nodePenalty\n        ? 1\n        : b.fitness + b.subNodesCount * this.nodePenalty > a.fitness + a.subNodesCount * this.nodePenalty\n        ? -1\n        : a.subNodesCount > b.subNodesCount\n        ? 1\n        : b.subNodesCount > a.subNodesCount\n        ? -1\n        : 0\n  }\n\n  calculateUsableFuncitons() {\n    console.log(this.problemType)\n    this.functionsArray = Object.values(functions).filter(({ onlyFor }) => onlyFor.includes(this.problemType))\n    this.userSelectedFunctions = R.mergeAll(\n      Object.keys(this.functions)\n        .filter((e) => this.functions[e].onlyFor.includes(this.problemType))\n        .map((e) => ({ [e]: true })),\n    )\n    console.log('test:', this.userSelectedFunctions)\n    console.log(\n      R.mergeAll(\n        Object.keys(this.functions)\n          .filter((e) => this.functions[e].onlyFor.includes(this.problemType))\n          .map((e) => ({ [e]: true })),\n      ),\n    )\n  }\n\n  getUserSelectedFunctions() {\n    console.log(this.userSelectedFunctions)\n    return this.userSelectedFunctions\n  }\n\n  setUserSelectedFunctions(functions) {\n    this.userSelectedFunctions = R.mergeAll(\n      Object.keys(this.userSelectedFunctions).map((e) => ({ [e]: !!functions[e] })),\n    )\n    this.functionsArray = Object.values(this.functions).filter(\n      (x) => !!functions[x.name] && x.onlyFor.includes(this.problemType),\n    )\n  }\n\n  setReduxSetters(setters) {\n    this.reduxSetters = { ...this.reduxSetters, ...setters }\n  }\n\n  setProperty(name, value) {\n    this[name] = value\n    if (name === 'problemType') {\n      this.calculateUsableFuncitons()\n    }\n    if (name === 'nodePenalty' && this.generation){\n      this.generation.sort(this.sortingFunction)\n      this.setBestSpecimensRedux()\n      this.bestSpecimen = structuredClone(this.generation[0])\n      this.reduxSetters.setBestSpecimen(mapSpecimenToStorable(this.bestSpecimen, this.functions, this.inputVariables))\n    }\n  }\n\n  parsePoints() {\n    const parseSinglePoint = {\n      real: (e) => Number(e),\n      integer: (e) => Math.round(Number(e)),\n      boolean: (e) => ['true', '1'].includes(e.trim().toLowerCase()),\n    }[this.problemType]\n    this.points = this.pointsRaw.split('\\n').map((line) => {\n      const vars = line.split(',').map((e) => parseSinglePoint(e))\n      const xs = vars.slice(0, -1)\n      const y = vars.slice(-1)[0]\n      return {\n        ...xs.reduce((acc, x) => ({ value: { ...acc.value, [`x${acc.i}`]: x }, i: acc.i + 1 }), { value: {}, i: 0 })\n          .value,\n        y,\n      }\n    })\n    console.log({ points: this.points })\n  }\n\n  parseLeaves() {\n    const isRange = (e) => e.startsWith('(') && e.endsWith(')')\n    const fromInput =\n      this.problemType !== 'boolean'\n        ? this.leavesRaw.split('\\n').map((line) => {\n            if (isRange(line)) {\n              const [min, max] = line\n                .slice(1, -1)\n                .split(',')\n                .map((e) => Number(e))\n              return this.problemType === 'real' ? () => getRandom(min, max) : () => randomIntInRange(min, max)\n            } else {\n              return () => Number(line)\n            }\n          })\n        : [true, false].map((e) => () => e)\n    this.inputVariables = Object.keys(this.points[0]).filter((e) => e !== 'y')\n    const fromPoints = this.inputVariables.map((e) => {\n      return () => e\n    })\n\n    this.leavesFunctions = [...fromInput, ...fromPoints]\n  }\n\n  createGenerationZero() {\n    // console.log(this.functionsArray)\n    const generation = [...Array(this.populationSize).keys()].map(() =>\n      generateTree('', this.functionsArray, this.leavesFunctions, this.maxTreeDepth),\n    )\n    generation.forEach((a) => assignFitness(this.evaluate, this.points, a))\n    generation.sort(this.sortingFunction)\n    this.generation = generation\n    // console.log(generation[10000])\n    // const mySpecimen = {\n    //   type: 'F',\n    //   name: 'bitwiseOr',\n    //   children: [\n    //     { type: 'T', value: 'x0', level: 2, subNodesCount: 1 },\n    //     { type: 'T', value: 'x1', level: 2, subNodesCount: 1 },\n    //   ],\n    // }\n    // console.log('chój')\n    // console.log(this.evaluate(this.points, mySpecimen))\n    // assignFitness(this.evaluate, this.points, mySpecimen)\n    // console.log(mySpecimen)\n  }\n\n  // async asyncCrossover(i) {\n\n  // }\n\n  async generateNextGeneration() {\n    const newGeneration = [...Array(this.populationSize).keys()]\n    let i = 0\n    while (i < newGeneration.length) {\n      if (i < newGeneration.length - 1 && trueWithProbabilty(this.crossoverProbability)) {\n        const chosen1 = chooseOne(this.generation, this.tournamentSize)\n        // console.log({chosen1})\n        // console.log(stringifySpecimen(chosen1))\n        const chosen2 = chooseOne(this.generation, this.tournamentSize)\n        const [a, b] = crossover(chosen1, chosen2)\n        newGeneration[i] = a\n        i++\n        newGeneration[i] = b\n        i++\n      } else {\n        const chosen = chooseOne(this.generation, this.tournamentSize)\n        // console.log(stringifySpecimen(chosen))\n        newGeneration[i] = mutate(chosen, this.mode, this.functionsArray, this.leavesFunctions, this.maxTreeDepth)\n        i++\n      }\n      if (i % 5000 === 0) {\n        console.log(i)\n      }\n    }\n\n    // await Promise.all(newGeneration.map((a) => new Promise(() => assignFitness(this.evaluate, this.points, a))))\n    newGeneration.forEach((a) => assignFitness(this.evaluate, this.points, a))\n    newGeneration.sort(this.sortingFunction)\n    this.newGeneration = newGeneration\n  }\n\n  setBestSpecimensRedux() {\n    this.reduxSetters.setBestSpecimens(\n      this.generation.slice(0, 10).map((e) => mapSpecimenToStorable(e, this.functions, this.inputVariables)),\n    )\n  }\n\n  startAndCreateFirstGeneration() {\n    this.reduxSetters.setAlgorithmState('RUNNING')\n    this.parsePoints()\n    this.parseLeaves()\n    this.currentGenerationNumber = 1\n    this.reduxSetters.setCurrentGeneration(this.currentGenerationNumber)\n    this.createGenerationZero()\n    this.bestSpecimen = structuredClone(this.generation[0])\n    this.reduxSetters.setBestSpecimen(mapSpecimenToStorable(this.bestSpecimen, this.functions, this.inputVariables))\n    this.setBestSpecimensRedux()\n  }\n\n  async createNextGeneration() {\n    console.log(this.nodePenalty)\n    this.parsePoints()\n    this.parseLeaves()\n    this.currentGenerationNumber++\n    this.reduxSetters.setCurrentGeneration(this.currentGenerationNumber)\n    await this.generateNextGeneration()\n    this.generation = this.newGeneration\n\n    this.setBestSpecimensRedux()\n\n    const bestSpecimenThisGeneration = this.generation[0]\n    const isCurrentBestBetterThanGlobalbest = this.sortingFunction(this.bestSpecimen, bestSpecimenThisGeneration) === 1\n    if (isCurrentBestBetterThanGlobalbest) {\n      this.bestSpecimen = structuredClone(bestSpecimenThisGeneration)\n      this.reduxSetters.setBestSpecimen(mapSpecimenToStorable(this.bestSpecimen, this.functions, this.inputVariables))\n    }\n\n    // console.log(stringifySpecimen(this.bestSpecimen), this.bestSpecimen.fitness)\n    // if (this.currentGenerationNumber >= this.numberOfGenerations) this.reduxSetters.setAlgorithmState('FINISHED')\n  }\n  async runIfNotFinished() {\n    this.parsePoints()\n    this.parseLeaves()\n    if (this.currentGenerationNumber >= this.numberOfGenerations) return true\n    if (this.currentGenerationNumber === 0) {\n      this.startAndCreateFirstGeneration()\n    } else {\n      await this.createNextGeneration()\n    }\n    return false\n  }\n}\n","import './App.css'\nimport Inputs from './inputs'\nimport Visuals from './visuals'\nimport Logic from './logic/Component'\nimport Algorithm from './logic/Algorithm'\nimport Grid from '@material-ui/core/Grid'\nimport { useParams } from 'react-router-dom'\nimport i18n from './i18n'\n\nexport default function App() {\n  const algorithm = new Algorithm()\n  const { lang } = useParams()\n  i18n.changeLanguage(lang)\n  return (\n    <div className='App'>\n      <Grid container>\n        <Grid item xs={12} sm={6} md={3} lg={2}>\n          <Inputs algorithm={algorithm}></Inputs>\n        </Grid>\n        <Grid item xs={12} sm={6} md={9} lg={10}>\n          <Visuals></Visuals>\n        </Grid>\n      </Grid>\n      <Logic algorithm={algorithm}></Logic>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const points = [...Array(20).keys()].map((a) => {\n  const x = a / 10\n  return {\n    x: x.toFixed(2),\n    y: (x * x - x).toFixed(2),\n  }\n})\n\nconst defaultState = {\n  problemType: 'real',\n  populationSize: 5000,\n  desiredGeneration: 0,\n  maxTreeDepth: 6,\n  tournamentSize: 50,\n  crossoverProbability: 0.2,\n  pointsRaw: points.map(({ x, y }) => `${x}, ${y}`).join('\\n'),\n  leavesRaw: ['1', '-1', '(-10,10)'].join('\\n'),\n  functions: {},\n  bestSpecimens: [],\n  bestSpecimen: null,\n  currentGeneration: '0',\n  algorithmState: 'BEFORE_RUN',\n  nodePenalty: 0,\n}\n\nconst canBeChangedAfterAlgorithmRun = [\n  'tournamentSize',\n  'crossoverProbability',\n  'leavesRaw',\n  'pointsRaw',\n  'nodePenalty',\n]\n\nexport const mainReducer = function (state = defaultState, action) {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      return state.algorithmState === 'RUNNING' && !canBeChangedAfterAlgorithmRun.includes(action.field)\n        ? state\n        : {\n            ...state,\n            [action.field]: action.value,\n          }\n    case 'SET_FUNCTIONS':\n      return {\n        ...state,\n        functions: action.functions,\n      }\n    case 'SET_FUNCTION':\n      return {\n        ...state,\n        functions: {\n          ...state.functions,\n          [action.name]: action.value,\n        },\n      }\n    case 'SET_ALGORITHM_STATE':\n      return {\n        ...state,\n        algorithmState: action.value,\n        desiredGeneration: action.value === 'BEFORE_RUN' ? 0 : state.desiredGeneration,\n      }\n    case 'SET_CURRENT_GENERATION':\n      return {\n        ...state,\n        currentGeneration: action.value,\n      }\n    case 'SET_BEST_SPECIMENS':\n      return {\n        ...state,\n        bestSpecimens: action.value,\n      }\n    case 'SET_BEST_SPECIMEN':\n      return {\n        ...state,\n        bestSpecimen: action.value,\n      }\n    case 'SET_DESIRED_GENERAION':\n      return {\n        ...state,\n        desiredGeneration: action.value,\n      }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { createStore } from 'redux'\nimport { mainReducer } from './reducers'\nimport { Provider } from 'react-redux'\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nconst store = createStore(mainReducer, composeWithDevTools())\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path='/:lang' children={<App />} />\n          <Route path='/' children={<App />} />\n          <Route path='' children={<App />} />\n        </Switch>\n      </Router>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}